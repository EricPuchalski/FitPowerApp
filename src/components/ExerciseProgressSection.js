import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { TrendingUp, TrendingDown, Activity, Clock } from 'lucide-react';
import { useState } from 'react';
export const ExerciseProgressSection = ({ data }) => {
    const [sortBy, setSortBy] = useState('progress'); // 'progress', 'name', 'weight'
    const [filterPositive, setFilterPositive] = useState(false);
    if (!data)
        return null;
    // Procesar y ordenar datos
    let exercises = Object.entries(data);
    if (filterPositive) {
        exercises = exercises.filter(([_, stats]) => stats.progressPercentage > 0);
    }
    exercises.sort(([nameA, statsA], [nameB, statsB]) => {
        switch (sortBy) {
            case 'progress':
                return statsB.progressPercentage - statsA.progressPercentage;
            case 'name':
                return nameA.localeCompare(nameB);
            case 'weight':
                return statsB.currentAverageWeight - statsA.currentAverageWeight;
            default:
                return 0;
        }
    });
    const positiveProgress = exercises.filter(([_, stats]) => stats.progressPercentage > 0).length;
    const totalExercises = exercises.length;
    return (_jsxs("div", { className: "space-y-8", children: [_jsxs("div", { className: "text-center", children: [_jsx("h3", { className: "text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2", children: "Progreso por Ejercicio" }), _jsx("p", { className: "text-gray-600", children: "Tu evoluci\u00F3n detallada en cada movimiento" })] }), _jsx("div", { className: "bg-gradient-to-br from-indigo-50 to-purple-50 p-6 rounded-2xl border border-indigo-200", children: _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-3 gap-4 text-center", children: [_jsxs("div", { children: [_jsx("div", { className: "text-2xl font-bold text-indigo-700", children: totalExercises }), _jsx("div", { className: "text-sm text-indigo-600", children: "Ejercicios totales" })] }), _jsxs("div", { children: [_jsx("div", { className: "text-2xl font-bold text-green-700", children: positiveProgress }), _jsx("div", { className: "text-sm text-green-600", children: "Con progreso positivo" })] }), _jsxs("div", { children: [_jsxs("div", { className: "text-2xl font-bold text-purple-700", children: [((positiveProgress / totalExercises) * 100).toFixed(0), "%"] }), _jsx("div", { className: "text-sm text-purple-600", children: "Tasa de mejora" })] })] }) }), _jsx("div", { className: "flex flex-wrap gap-4 items-center justify-between bg-white p-4 rounded-xl shadow-sm border border-gray-200", children: _jsxs("div", { className: "flex items-center gap-4", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("label", { className: "text-sm font-medium text-gray-700", children: "Ordenar por:" }), _jsxs("select", { value: sortBy, onChange: (e) => setSortBy(e.target.value), className: "px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500", children: [_jsx("option", { value: "progress", children: "Progreso" }), _jsx("option", { value: "name", children: "Nombre" }), _jsx("option", { value: "weight", children: "Peso actual" })] })] }), _jsxs("label", { className: "flex items-center gap-2 cursor-pointer", children: [_jsx("input", { type: "checkbox", checked: filterPositive, onChange: (e) => setFilterPositive(e.target.checked), className: "w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" }), _jsx("span", { className: "text-sm text-gray-700", children: "Solo progreso positivo" })] })] }) }), _jsx("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: exercises.map(([name, stats], index) => (_jsxs("div", { className: "group relative bg-white rounded-2xl p-6 shadow-lg hover:shadow-2xl transform hover:-translate-y-1 transition-all duration-300 border border-gray-100 hover:border-blue-200", children: [_jsx("div", { className: "absolute -top-3 -right-3", children: _jsx("div", { className: `p-2 rounded-full shadow-lg ${stats.progressPercentage >= 0
                                    ? 'bg-gradient-to-r from-green-500 to-emerald-500'
                                    : 'bg-gradient-to-r from-red-500 to-pink-500'}`, children: stats.progressPercentage >= 0 ? (_jsx(TrendingUp, { className: "w-5 h-5 text-white" })) : (_jsx(TrendingDown, { className: "w-5 h-5 text-white" })) }) }), _jsxs("div", { className: "mb-6", children: [_jsx("h4", { className: "font-bold text-xl text-gray-800 mb-2 group-hover:text-blue-600 transition-colors", children: name }), _jsxs("div", { className: "grid grid-cols-2 gap-4 mb-4", children: [_jsxs("div", { className: "bg-gradient-to-br from-blue-50 to-indigo-50 p-3 rounded-xl border border-blue-100", children: [_jsx("div", { className: "text-xs text-blue-600 font-medium mb-1", children: "INICIAL" }), _jsxs("div", { className: "text-lg font-bold text-blue-700", children: [stats.initialAverageWeight.toFixed(1), " kg"] })] }), _jsxs("div", { className: "bg-gradient-to-br from-purple-50 to-pink-50 p-3 rounded-xl border border-purple-100", children: [_jsx("div", { className: "text-xs text-purple-600 font-medium mb-1", children: "ACTUAL" }), _jsxs("div", { className: "text-lg font-bold text-purple-700", children: [stats.currentAverageWeight.toFixed(1), " kg"] })] })] })] }), _jsxs("div", { className: "mb-4", children: [_jsxs("div", { className: "flex justify-between items-center mb-2", children: [_jsx("span", { className: "text-sm font-medium text-gray-600", children: "Progreso en peso" }), _jsxs("span", { className: `text-sm font-bold px-2 py-1 rounded-full ${stats.progressPercentage >= 0
                                                ? 'bg-green-100 text-green-700'
                                                : 'bg-red-100 text-red-700'}`, children: [stats.progressPercentage >= 0 ? '+' : '', stats.progressPercentage.toFixed(1), "%"] })] }), _jsx("div", { className: "w-full bg-gray-200 rounded-full h-3 overflow-hidden", children: _jsx("div", { className: `h-3 rounded-full transition-all duration-1000 ease-out ${stats.progressPercentage >= 0
                                            ? 'bg-gradient-to-r from-green-400 to-emerald-500'
                                            : 'bg-gradient-to-r from-red-400 to-pink-500'}`, style: { width: `${Math.min(100, Math.abs(stats.progressPercentage))}%` } }) })] }), _jsxs("div", { className: "grid grid-cols-2 gap-3", children: [_jsxs("div", { className: "flex items-center gap-2 bg-gray-50 px-3 py-2 rounded-lg", children: [_jsx(Activity, { className: "w-4 h-4 text-orange-500" }), _jsxs("div", { children: [_jsx("div", { className: "text-xs text-gray-600", children: "Reps m\u00E1x" }), _jsx("div", { className: "font-bold text-gray-800", children: stats.maxRepetitions })] })] }), _jsxs("div", { className: "flex items-center gap-2 bg-gray-50 px-3 py-2 rounded-lg", children: [_jsx(Clock, { className: "w-4 h-4 text-blue-500" }), _jsxs("div", { children: [_jsx("div", { className: "text-xs text-gray-600", children: "Descanso" }), _jsxs("div", { className: "font-bold text-gray-800", children: [stats.minRestTime, "s"] })] })] })] })] }, name))) })] }));
};
